})
#########################
######Publishing#########
###TABSET: REAL TIME#####
output$realtime <- renderPlot({
print(realtime_chart)
})
output$tides <- renderPlot({
print(tide_chart)
})
###TABSET: PRIOR DATA####
output$linechart <- renderPlot({
print(prior_linechart)
})
output$barchart <- renderPlot({
print(prior_barchart)
})
})
##TABSET: ABOUT
shiny::runApp()
rm(list = ls())
library(ggplot2)
library(plyr)
library(shiny)
library(lubridate)
library(stringr)
library(jpeg)
input <- list()
input$start_year <- 2007
input$end_year <- 2010
input$start_date <- "06-30"
input$end_date <- "08-05"
load("kenai_data.rda")
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
days_in_the_future <- 1
start_time <- now() - hours(10)
end_time <- now() + days(days_in_the_future)
return(tide_df[tide_df$times > start_time & tide_df$times < end_time,])
tides_reactive <- tide_df[tide_df$times > start_time & tide_df$times < end_time,]
sonar_df$year <- factor(sonar_df$year)
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
start_date <-  ymd(paste("2014",input$start_date, sep = "-"))
end_date <- ymd(paste("2014", input$end_date, sep = "-"))
sonar_df <- sonar_df[start_year <= as.numeric(levels(sonar_df$year))[sonar_df$year] &
end_year   >= as.numeric(levels(sonar_df$year))[sonar_df$year] &
start_date <= sonar_df$date &
end_date   >= sonar_df$date,]
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_point()
p
ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_point()
#sonar_reactive <- sonar_df
sonar_reactive <- sonar_df
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_point()
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_line()
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_point()
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_bar()
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_bar()
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_bar(stat = "bin")
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_bar(stat = "identity")
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year, fill = year)) +
geom_bar(stat = "identity")
p
ylimit <- max(sonar_df$cfue_estimates)
max(sonar_df$cfue_estimates)
sonar_df
ylimit <- max(rt_dat$cfue_estimates)
reatime_reactive <- rt_dat
ylimit <- max(realtime_reactive$cfue_estimates)
realtime_reactive <- rt_dat
ylimit <- max(realtime_reactive$cfue_estimates)
p <- ggplot(data = realtime_reactive, aes(x = date, y = cfue_estimates)) +
ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(colour = "red"), size = 5) +
stat_smooth(  method = "lm",
formula = y ~ poly(x, 4),
level = .95,
fullrange = FALSE,
se = TRUE,
aes(colour = "black")) +
theme(legend.position="none") +
ggtitle("Predicted Catch Per Effort") +
ylab("Predicted Sockeye Catch Per Day")
return(p)
p
p
p <- ggplot(data = realtime_reactive, aes(x = date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(colour = "red"), size = 5)
p
realtime_reactive
realtime_reactive
p <- ggplot(data = realtime_reactive, aes(x = date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
p
date
head(realtime_reactive)
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
stat_smooth(  method = "lm",
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
p
ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
shiny::runApp()
p
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
stat_smooth(  method = "lm",
formula = y ~ poly(x, 4),
level = .95,
fullrange = FALSE,
se = TRUE,
aes(colour = "black")) +
theme(legend.position="none") +
ggtitle("Predicted Catch Per Effort") +
ylab("Predicted Sockeye Catch Per Day")
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year, fill = year)) +
geom_bar(stat = "identity")
p
input$start_year <- 1979
input$end_year <- 2012
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
sonar_df$year <- factor(sonar_df$year)
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
start_date <-  ymd(paste("2014",input$start_date, sep = "-"))
end_date <- ymd(paste("2014", input$end_date, sep = "-"))
sonar_df <- sonar_df[start_year <= as.numeric(levels(sonar_df$year))[sonar_df$year] &
end_year   >= as.numeric(levels(sonar_df$year))[sonar_df$year] &
start_date <= sonar_df$date &
end_date   >= sonar_df$date,]
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year, fill = year)) +
geom_bar(stat = "identity")
p
input <- list()
input$start_year <- 1979
input$end_year <- 2012
input$start_date <- "06-30"
input$end_date <- "08-05"
load("kenai_data.rda")
sonar_df$year <- factor(sonar_df$year)
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
start_date <-  ymd(paste("2014",input$start_date, sep = "-"))
end_date <- ymd(paste("2014", input$end_date, sep = "-"))
sonar_df <- sonar_df[start_year <= as.numeric(levels(sonar_df$year))[sonar_df$year] &
end_year   >= as.numeric(levels(sonar_df$year))[sonar_df$year] &
start_date <= sonar_df$date &
end_date   >= sonar_df$date,]
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_line()
p
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year, fill = year)) +
geom_bar(stat = "identity")
p
load("kenai_data.rda")
sonar_df$year <- factor(sonar_df$year)
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
start_date <-  ymd(paste("2014",input$start_date, sep = "-"))
end_date <- ymd(paste("2014", input$end_date, sep = "-"))
sonar_df <- sonar_df[start_year <= as.numeric(levels(sonar_df$year))[sonar_df$year] &
end_year   >= as.numeric(levels(sonar_df$year))[sonar_df$year] &
start_date <= sonar_df$date &
end_date   >= sonar_df$date,]
sonar_df
sonar_reactive <- sonar_df
p <- ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year, fill = year)) +
geom_bar(stat = "identity")
p
shiny::runApp()
print(realtime_chart)
rm(list = ls())
library(ggplot2)
library(plyr)
library(shiny)
library(lubridate)
library(stringr)
library(jpeg)
input <- list()
shiny::runApp()
input$start_year <- 1979
input$end_year <- 2012
input$start_date <- "06-30"
input$end_date <- "08-05"
input
load("kenai_data.rda")
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
days_in_the_future <- 1
start_time <- now() - hours(10)
end_time <- now() + days(days_in_the_future)
tides_reactive <- tide_df[tide_df$times > start_time & tide_df$times < end_time,]
sonar_df$year <- factor(sonar_df$year)
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
start_date <-  ymd(paste("2014",input$start_date, sep = "-"))
end_date <- ymd(paste("2014", input$end_date, sep = "-"))
sonar_df <- sonar_df[start_year <= as.numeric(levels(sonar_df$year))[sonar_df$year] &
end_year   >= as.numeric(levels(sonar_df$year))[sonar_df$year] &
start_date <= sonar_df$date &
end_date   >= sonar_df$date,]
sonar_reactive <- sonar_df
realtime_reactive <- rt_dat
ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year)) +
geom_line()
ggplot(data = sonar_reactive, aes(x = date, y = n, group = year, color = year, fill = year)) +
geom_bar(stat = "identity")
ylimit <- max(realtime_reactive$cfue_estimates)
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
p
realtime_reactive
library(ggplot2)
library(plyr)
library(shiny)
library(lubridate)
library(stringr)
library(jpeg)
load("kenai_data.rda")
rt_dat
library(XML)
library(lubridate)
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[90]]
rt_dat
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat$Count <- as.numeric(gsub(",", "", as.character(levels(rt_dat$Count))))
rt_dat$Date <- mdy(paste(rt_dat$Date, "2014", sep = "-"))
rt_dat
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[90]]
rt_dat
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
as.numeric(gsub(",", "", as.character(levels(rt_dat$Count))))
levels(rt_dat$Count)
rt_dat$Count
as.character(rt_dat$Count)
library(XML)
library(lubridate)
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[90]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat$Count <- as.numeric(gsub(",", "", as.character(rt_dat$Count)))
rt_dat$Count
rt_dat$Date <- mdy(paste(rt_dat$Date, "2014", sep = "-"))
#Catch for unit efforet (CFUE) MODEL
C <- -20.29183
A <-  3.2209791
rt_dat$cfue_estimates <- (A * log(rt_dat$Count, exp(1))) + C
rt_dat$cfue_estimates[rt_dat$cfue_estimates <= 0] <- 0
save(rt_dat, file = "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rm(list = ls())
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rt_dat
rm(list = ls())
input <- list()
input$start_year <- 1979
input$end_year <- 2012
input$start_date <- "06-30"
input$end_date <- "08-05"
load("kenai_data.rda")
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
sonar_df$year <- factor(sonar_df$year)
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
start_date <-  ymd(paste("2014",input$start_date, sep = "-"))
end_date <- ymd(paste("2014", input$end_date, sep = "-"))
sonar_df <- sonar_df[start_year <= as.numeric(levels(sonar_df$year))[sonar_df$year] &
end_year   >= as.numeric(levels(sonar_df$year))[sonar_df$year] &
start_date <= sonar_df$date &
end_date   >= sonar_df$date,]
sonar_reactive <- sonar_df
realtime_reactive <- rt_dat
ylimit <- max(realtime_reactive$cfue_estimates)
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
p
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
stat_smooth(  method = "lm",
formula = y ~ poly(x, 4),
level = .95,
fullrange = FALSE,
se = TRUE,
aes(colour = "black")) +
theme(legend.position="none") +
ggtitle("Predicted Catch Per Effort") +
ylab("Predicted Sockeye Catch Per Day")
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
#ylim(c(0, ylimit) * 1.1) +
#xlim(c(sonar_df$date[1], future)) +
geom_point(aes(color = "red"), size = 5)
stat_smooth(  method = "lm",
formula = y ~ poly(x, 4),
level = 0.95,
fullrange = FALSE,
se = TRUE,
aes(colour = "black")) +
theme(legend.position="none") +
ggtitle("Predicted Catch Per Effort") +
ylab("Predicted Sockeye Catch Per Day")
p <- ggplot(data = realtime_reactive, aes(x = Date, y = cfue_estimates)) +
ylim(c(0, ylimit) * 1.1) +
#xlim(c(real_tim$date[1], future))
geom_point(aes(color = "red"), size = 5) +
stat_smooth(  method = "lm",
formula = y ~ poly(x, 4),
level = 0.95,
fullrange = FALSE,
se = TRUE,
aes(colour = "black")) +
theme(legend.position="none") +
ggtitle("Predicted Catch Per Effort") +
ylab("Predicted Sockeye Catch Per Day")
return(p)
p
days_in_the_future <- 1
day_time <- hm(tide_df$Day)
dates <- ymd(gsub("/", "-",as.character(tide_df$Date)))
times <- dates + day_time
tide_df$times <- times
start_time <- now() - hours(10)
end_time <- now() + days(days_in_the_future)
gg_sonar_df <- tide_df[tide_df$times > start_time & tide_df$times < end_time,]
p <- ggplot(data = gg_sonar_df, aes(x = times, y = Time)) +
geom_smooth(method = "loess", se = FALSE) + ggtitle("Tidal Cycle") +
ylab("River Depth in Feet")
p
gg_sonar_df
tide_df
load("kenai_data.rda")
ggplot(data = gg_sonar_df, aes(x = times, y = time)) + geom_point()
head(gg_sonar_df)
load("kenai_data.rda")
days_in_the_future <- 1
day_time <- hm(tide_df$Day)
dates <- ymd(gsub("/", "-",as.character(tide_df$Date)))
times <- dates + day_time
times
day_time <- hm(tide_df$Day)
Sys.setenv(TZ='GMT')
?timezone
Sys.setenv(TZ="America/Anchorage")
Sys.timezon
Sys.timezone
Sys.timezone()
days_in_the_future <- 1
day_time <- hm(tide_df$Day)
hm
tide_df$Day
load("kenai_data.rda")
days_in_the_future <- 1
day_time <- hm(tide_df$Day)
tide_df
head(tide_df)
day_time <- hm(tide_df$times)
tide_df$times
ymd(gsub("/", "-",as.character(tide_df$times)))
tide_df$times
tide_df$times > start_time
tide_df$times < end_time
tide_df2 <- tide_df[tide_df$times > start_time & tide_df$times < end_time,]
tide_df2
p <- ggplot(data = gg_sonar_df, aes(x = times, y = time)) + geom_point()
geom_smooth(method = "loess", se = FALSE) + ggtitle("Tidal Cycle") +
ylab("River Depth in Feet")
p
p <- ggplot(data = tide_df2, aes(x = times, y = time)) + geom_point()
geom_smooth(method = "loess", se = FALSE) + ggtitle("Tidal Cycle") +
ylab("River Depth in Feet")
p
tide_df2
p <- ggplot(data = tide_df2, aes(x = times, y = height)) + geom_point()
p
p <- ggplot(data = tide_df2, aes(x = times, y = height)) +
geom_smooth(method = "loess", se = FALSE) + ggtitle("Tidal Cycle") +
ylab("River Depth in Feet")
p
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shiyn")
install.packages("shinu")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
runApp(choose.dir())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[90]]
library(XML)
library(lubridate)
rt_dat <- readHTMLTable(u)[[90]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[90]]
rt_dat
readHTMLTable(u)
length(readHTMLTable(u))
rt_dat <- readHTMLTable(u)[[123]]
rt_dat
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat$Count <- as.numeric(gsub(",", "", as.character(rt_dat$Count)))
rt_dat$Date <- mdy(paste(rt_dat$Date, "2014", sep = "-"))
rt_dat
C <- -20.29183
A <-  3.2209791
rt_dat$cfue_estimates <- (A * log(rt_dat$Count, exp(1))) + C
rt_dat$cfue_estimates[rt_dat$cfue_estimates <= 0] <- 0
save(rt_dat, file = "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rm(list = ls())
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rt_dat
rt_dat <- rt_dat[32:28,]
C <- -20.29183
A <-  3.2209791
rt_dat$cfue_estimates <- (A * log(rt_dat$Count, exp(1))) + C
rt_dat$cfue_estimates[rt_dat$cfue_estimates <= 0] <- 0
rt_dat
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[123]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat$Count <- as.numeric(gsub(",", "", as.character(rt_dat$Count)))
rt_dat
rt_dat <- rt_dat[32:28,]
rt_dat
rt_dat$Date <- mdy(paste(rt_dat$Date, "2014", sep = "-"))
rt_dat
rt_dat <- readHTMLTable(u)[[123]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat
rt_dat <- rt_dat[32:28,]
rt_dat
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[123]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat$Count <- as.numeric(gsub(",", "", as.character(rt_dat$Count)))
rt_dat$Date <- mdy(paste(rt_dat$Date, "2014", sep = "-"))
dim(rt_dat)
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[123]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat
rt_dat <- rt_dat[32:38,]
u <- "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\webcounts.htm"
rt_dat <- readHTMLTable(u)[[123]]
colnames(rt_dat) <- c("Date", "Count", "Cumulative", "Notes")
rt_dat <- rt_dat[32:38,]
rt_dat$Count <- as.numeric(gsub(",", "", as.character(rt_dat$Count)))
rt_dat$Date <- mdy(paste(rt_dat$Date, "2014", sep = "-"))
C <- -20.29183
A <-  3.2209791
rt_dat$cfue_estimates <- (A * log(rt_dat$Count, exp(1))) + C
rt_dat$cfue_estimates[rt_dat$cfue_estimates <= 0] <- 0
save(rt_dat2, file = "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rt_dat2 <- rt_dat
save(rt_dat2, file = "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rm(list = ls())
load("C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat.rda")
rt_dat
rt_dat
rt_dat2
save(rt_dat2, file = "C:\\Users\\Hans T\\Desktop\\dipnet_app_revamp\\rt_dat2.rda")
